# This is an example command dictionary configuration. Mind you, this is an
# example script meant to convey the structure of this configuration, it will
# probably not work as is on your terminal.

# Paths that will be added to the runtime PATH variable. Add any paths of
# executables called from your custom commands, the paths of which are not 
# yet in the environment PATH variable.
# Make sure the bot has read and execute access to the scripts, otherwise they
# won't work.
paths:
  - /home/YOURUSER/.local/lib/matrix-eno-bot/eno/scripts
  - /home/YOURUSER/.local/etc/matrix-eno-bot/bin

# Definitions of bot commands.
# The children of the "commands" key are the command names. These are the
# commands that you want to add to your bot, and which you will invoke by name.
# They in turn may have the following keys (or properties):
#
#   cmd:               name of the command or executable, which the bot
#                      will attempt to call and pass arguments to.
#   help:              help string for when you forget how use the command.
#                      The help string provided will be listed and shown with
#                      the 'help' command of the bot.
#   regex:             regex pattern whose matches are valid ways to call the 
#                      command.
#                      If a bot message matches a regular expression, then the
#                      corresponding command will be executed. 
#                      If a bot message matched multiple regular expressions, 
#                      only the first matching command will be executed!
#                      It is recommended that the regular expressions are used
#                      such that they are mutually exclusive to avoid
#                      situation where one messages matches multiple regular
#                      expressions.
#   markdown_convert:  true or false. Specifies whether the message reply will
#                      be formatted into markdown. 
#                      Defaults to true.
#   formatted:         true or false. Specifies whether message reply will
#                      be sent as formatted message.
#                      Defaults to true.
#   code:              true or false. Specifies whether message reply will
#                      be formatted as a code block with fixed-size font.
#                      If set to True, markdown_convert will be ignored.
#                      Defaults to false.
#   split:             string which if set, splits the message reply into
#                      multiple messages wherever the string specified in
#                      split occurs.
#                      Defaults to None, no message splitting by default.
commands:

  # Custom commands
  # ---------------

  # Default commands
  # ----------------

  # alert if too many resources are used, best to use with cron
  alert:
    regex:             "alert$|^alert .*$|^alarm$|^alarm .*|^alert.sh$"
    cmd:               alert.sh
    help:              shows if any CPU, RAM, or disk thresholds have been exceeded
    markdown_convert:  false
    formatted:         true
    code:              true
  # perform a backup to disk
  backup:
    regex:             "^backup$|^backup .*$|^backup.sh$"
    cmd:               backup.sh
    help:              performs backup on server
    markdown_convert:  false
    formatted:         true
    code:              true
  # get BTC ticker
  btc:
    regex:             "^btc$|^btc .*$|^bitcoin$|^btc.sh$"
    cmd:               btc.sh
    help:              gives Bitcoin BTC price info
    markdown_convert:  false
    formatted:         true
    code:              true
  # get cheatsheets, see https://github.com/cheat/cheat
  cheatsheet:
    regex:             "^cheat$|^cheatsheet$|^chuleta$|^cheat.sh$|^cheat .*$|^cheatsheet .*$|^chuleta .*$|^cheat.sh .*$",
    cmd:               cheat
    help:              get cheatsheets, see https://github.com/cheat/cheat
    markdown_convert:  false
    formatted:         true
    code:              true
  # check status and look for updates
  # see also: upgrade
  check:
    regex:             "^check$|^chk$|^status$|^state$|^check .*$|^chk .*|^status .*$|^state .*$|^check.sh$|^check.sh .*",
    cmd:               check.sh
    help:              check status, health status, updates, etc.
    markdown_convert:  false
    formatted:         true
    code:              false
  # CPU temperature
  cputemp:
    regex:             "^cpu$|^temp$|^temperature$|^celsius$|^cputemp.*$|^hot$|^chaud$",
    cmd:               cputemp.sh
    help:              monitor the CPU temperatures
    markdown_convert:  false
    formatted:         true
    code:              false
  # get date and time
  datetime:
    regex:             "^date$|^time$|^tiempo$|^hora$|^temps$|^heure$|^heures$|^datum$|^zeit$|^datetime.sh$"
    cmd:               datetime.sh
    help:              gives date and time of server
    markdown_convert:  false
    formatted:         true
    code:              true
  # duckduckgo
  ddg:
    regex:             "^ddg$|^ddg .*$|^duck$|^duck .*$|^duckduckgo$|^duckduckgo .*$|^search$|^search .*|^ddg.sh$|^ddg.sh .*"
    cmd:               ddg.sh
    help:              search the web with DuckDuckGo search
    markdown_convert:  false
    formatted:         true
    code:              false
  # disk space
  disks:
    regex:             "^disks$|^disk$|^full$|^space$|^disks.sh$"
    cmd:               disks.sh
    help:              see how full your disks or mountpoints are
    markdown_convert:  false
    formatted:         true
    code:              true
  # echo
  echo:
    regex:             "^echo$|^echo .*"
    cmd:               echo.py
    help:              trivial example to have the bot respond, it echoes
    markdown_convert:  true
    formatted:         true
    code:              false
  # get ETH ticker
  eth:
    regex:             "^eth$|^eth .*$|^ethereum$|^eth.sh$"
    cmd:               eth.sh
    help:              gives Ethereum price info
    markdown_convert:  false
    formatted:         true
    code:              true
  # get firewall settings
  firewall:
    regex:             "^firewall$|^fw$|^firewall .*$|^firewall.sh$"
    cmd:               firewall.sh
    help:              list the firewall settings and configuration
    markdown_convert:  false
    formatted:         true
    code:              true
  # get a compliment, hello
  hello:
    regex:             "^salut$|^ciao$|^hallo$|^hi$|^servus$|^hola$|^hello$|^hello .*$|^bonjour$|^bonne nuit$|^hello.sh$"
    cmd:               hello.sh
    help:              gives you a friendly compliment
    markdown_convert:  false
    formatted:         true
    code:              false
  # Hacker News
  hn:
    regex:             "^hn$|^hn .*$|^hn.sh$|^hn.sh .*"
    cmd:               hn.sh
    help:              read Hacker News, fetches front page headlines from Hacker News
    markdown_convert:  false
    formatted:         true
    code:              false
  # Messari News
  mn:
    regex:             "^mn$|^mn .*$|^mn.sh$|^mn.sh .*"
    cmd:               mn.sh
    help:              read Messari News, fetches the latest news articles from Messari
    markdown_convert:  false
    formatted:         true
    code:              false
    split:             "\n\n\n"
  # message of the day
  motd:
    regex:             "^motd|^motd .*|^motd.sh$"
    cmd:               motd.sh
    help:              gives you the Linux Message Of The Day
  # platform info
  platforminfo:
    regex:             "^platform$|^platform .*|^platforminfo.py$"
    cmd:               platforminfo.py
    help:              gives hardware and operating system platform information
  # ps, host status
  ps:
    regex:             "^ps$|^ps .*|^ps.sh$"
    cmd:               ps.sh
    help:              print current CPU, RAM and Disk utilization of server
    markdown_convert:  false
    formatted:         true
    code:              true
  # restart, reset
  restart:
    regex:             "^restart$|^reset$|^restart .*$|^reset .*$|^restart.sh$|^restart.sh .*"
    cmd:               restart.sh
    help:              restart the bot itself, or Matrix services
    markdown_convert:  false
    formatted:         true
    code:              false
  # RSS
  rss:
    regex:             "^rss$|^feed$|^rss .*$|^feed .*$|^rss.sh$|^rss.sh .*"
    cmd:               rss.sh
    help:              read RSS feeds
    markdown_convert:  false
    formatted:         true
    code:              false
    split:             "\n\n\n"
  # Stock-to-flow
  s2f:
    regex:             "^s2f$|^mys2f.py.*|^flow$|^s2f|^flow .*$|^s2f .$|^s-to-f$|^stock-to-flow .*$|^eyf$|^eyf .*$|^e-y-f$"
    cmd:               s2f.sh
    help:              gives Stock-to-flow info
    markdown_convert:  false
    formatted:         true
    code:              true
  # tides
  tides:
    regex:             "^tide$|^tides$|^marea|^mareas|^tide .*$|^tides .*$|^marea .*$|^mareas .*$|^gehzeiten .*$|^tides.sh$|^tides.sh .*"
    cmd:               tides.sh
    help:              give tidal forecast
    markdown_convert:  false
    formatted:         true
    code:              false
  # top CPU, MEM consumers
  top:
    regex:             "^top$|^top .*|^top.sh$|^top.sh .*"
    cmd:               top.sh
    help:              gives 5 top CPU and RAM consuming processes
    markdown_convert:  false
    formatted:         true
    code:              true
  # get TOTP 2FA pin
  totp:
    regex:             "^otp$|^totp$|^otp .*$|^totp .*$|"
    cmd:               totp.sh
    help:              get 2FA Two-factor-authentication TOTP PIN via bot message
    markdown_convert:  false
    formatted:         true
    code:              false
  # twitter
  twitter:
    regex:             "^tweet$|^twitter$|^tweet .*$|^twitter .*$|^twitter.sh$|^twitter.sh .*"
    cmd:               twitter.sh
    help:              read latest user tweets from Twitter
    markdown_convert:  false
    formatted:         true
    code:              false
  # update components
  update:
    regex:             "^update$|^upgrade$|^update .*$|^upgrade .*$|^update.sh$|^update.sh .*"
    cmd:               update.sh
    help:              update operating sytem
    markdown_convert:  false
    formatted:         true
    code:              false
  # list matrix users by issuing a REST API query
  users:
    regex:             "^usr$|^user$|^users$|^users .*$|^users.sh$|"
    cmd:               users.sh
    help:              list registered Matrix users
    markdown_convert:  false
    formatted:         true
    code:              true
  # wake up PC via wake-on-LAN
  wake:
    regex:             "^wake$|^wakeup$|^wake .*$|^wakeup .*$|^wakelan .*$|^wake.sh$|^wake .*"
    cmd:               wake.sh
    help:              wake up another PC via LAN
    markdown_convert:  false
    formatted:         true
    code:              false
  # waves and surf conditions
  # see also: tides
  waves:
    regex:             "^wave$|^waves$|^wave .*$|^waves .*$|^surf$|^surf .*$|^waves.sh$"
    cmd:               waves.sh
    help:              give waves and surf forecast
    markdown_convert:  false
    formatted:         true
    code:              true
  # get weather forecast
  weather:
    regex:             "^weather$|^tiempo$|^wetter$|^temps$|^weather .*$|^tiempo .*$|^eltiempo .*$|^wetter .*$|^temps .*$|^weather.sh$|^weather.sh .*"
    cmd:               weather.sh
    help:              gives weather forecast
    markdown_convert:  false
    formatted:         true
    code:              true
  # fetch web pages
  web:
    regex:             "^www$|^web$|^web .*$|^www .*$|^browse$|^browse .*|^web.sh$|^web.sh .*"
    cmd:               web.sh
    help:              surf the web, get a web page (JavaScript not supported)
    markdown_convert:  false
    formatted:         true
    code:              false
  # whoami
  whoami:
    regex:             "^w$|^who$|^whoami$"
    cmd:               whoami.py
    help:              returns information about the user, whose unix account is running the bot
    markdown_convert:  true
    formatted:         true
    code:              false

